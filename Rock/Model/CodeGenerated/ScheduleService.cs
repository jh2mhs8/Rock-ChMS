//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//

using System;
using System.Linq;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Schedule Service class
    /// </summary>
    public partial class ScheduleService : Service<Schedule>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleService"/> class
        /// </summary>
        public ScheduleService()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleService"/> class
        /// </summary>
        public ScheduleService(IRepository<Schedule> repository) : base(repository)
        {
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( Schedule item, out string errorMessage )
        {
            errorMessage = string.Empty;
            return true;
        }
    }

    /// <summary>
    /// Generated Extension Methods
    /// </summary>
    public static class ScheduleExtensionMethods
    {
        /// <summary>
        /// Clones this Schedule object to a new Schedule object
        /// </summary>
        /// <param name="source">The source.</param>
        /// <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
        /// <returns></returns>
        public static Schedule Clone( this Schedule source, bool deepCopy )
        {
            if (deepCopy)
            {
                return source.Clone() as Schedule;
            }
            else
            {
                var target = new Schedule();
                target.Name = source.Name;
                target.Frequency = source.Frequency;
                target.FrequencyQualifier = source.FrequencyQualifier;
                target.StartTime = source.StartTime;
                target.EndTime = source.EndTime;
                target.CheckInStartTime = source.CheckInStartTime;
                target.CheckInEndTime = source.CheckInEndTime;
                target.EffectiveStartDate = source.EffectiveStartDate;
                target.EffectiveEndDate = source.EffectiveEndDate;
                target.Id = source.Id;
                target.Guid = source.Guid;

            
                return target;
            }
        }
    }
}

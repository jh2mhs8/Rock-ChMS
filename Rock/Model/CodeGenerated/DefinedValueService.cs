//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//

using System;
using System.Linq;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// DefinedValue Service class
    /// </summary>
    public partial class DefinedValueService : Service<DefinedValue>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DefinedValueService"/> class
        /// </summary>
        public DefinedValueService()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefinedValueService"/> class
        /// </summary>
        public DefinedValueService(IRepository<DefinedValue> repository) : base(repository)
        {
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( DefinedValue item, out string errorMessage )
        {
            errorMessage = string.Empty;
 
            if ( new Service<Attendance>().Queryable().Any( a => a.QualifierValueId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", DefinedValue.FriendlyTypeName, Attendance.FriendlyTypeName );
                return false;
            }  
 
            if ( new Service<Device>().Queryable().Any( a => a.DeviceTypeValueId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", DefinedValue.FriendlyTypeName, Device.FriendlyTypeName );
                return false;
            }  
            
            // ignoring FinancialTransaction,CurrencyTypeValueId 
            
            // ignoring FinancialTransaction,CreditCardTypeValueId 
            
            // ignoring FinancialTransaction,SourceTypeValueId 
 
            if ( new Service<Fund>().Queryable().Any( a => a.FundTypeValueId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", DefinedValue.FriendlyTypeName, Fund.FriendlyTypeName );
                return false;
            }  
            
            // ignoring GroupLocation,LocationTypeValueId 
 
            if ( new Service<Location>().Queryable().Any( a => a.LocationTypeValueId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", DefinedValue.FriendlyTypeName, Location.FriendlyTypeName );
                return false;
            }  
 
            if ( new Service<Metric>().Queryable().Any( a => a.CollectionFrequencyValueId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", DefinedValue.FriendlyTypeName, Metric.FriendlyTypeName );
                return false;
            }  
 
            if ( new Service<Note>().Queryable().Any( a => a.SourceTypeValueId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", DefinedValue.FriendlyTypeName, Note.FriendlyTypeName );
                return false;
            }  
            
            // ignoring Person,MaritalStatusValueId 
            
            // ignoring Person,PersonStatusValueId 
            
            // ignoring Person,RecordStatusValueId 
            
            // ignoring Person,RecordStatusReasonValueId 
            
            // ignoring Person,RecordTypeValueId 
            
            // ignoring Person,SuffixValueId 
            
            // ignoring Person,TitleValueId 
 
            if ( new Service<PhoneNumber>().Queryable().Any( a => a.NumberTypeValueId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", DefinedValue.FriendlyTypeName, PhoneNumber.FriendlyTypeName );
                return false;
            }  
 
            if ( new Service<Pledge>().Queryable().Any( a => a.FrequencyTypeValueId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", DefinedValue.FriendlyTypeName, Pledge.FriendlyTypeName );
                return false;
            }  
            return true;
        }
    }

    /// <summary>
    /// Generated Extension Methods
    /// </summary>
    public static class DefinedValueExtensionMethods
    {
        /// <summary>
        /// Clones this DefinedValue object to a new DefinedValue object
        /// </summary>
        /// <param name="source">The source.</param>
        /// <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
        /// <returns></returns>
        public static DefinedValue Clone( this DefinedValue source, bool deepCopy )
        {
            if (deepCopy)
            {
                return source.Clone() as DefinedValue;
            }
            else
            {
                var target = new DefinedValue();
                target.IsSystem = source.IsSystem;
                target.DefinedTypeId = source.DefinedTypeId;
                target.Order = source.Order;
                target.Name = source.Name;
                target.Description = source.Description;
                target.Id = source.Id;
                target.Guid = source.Guid;

            
                return target;
            }
        }
    }
}

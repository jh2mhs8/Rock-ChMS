using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace EnsureCopyrightHeader
{
    class Program
    {
        /// <summary>
        /// Mains the specified args.
        /// </summary>
        /// <param name="args">The args.</param>
        static void Main( string[] args )
        {
            //C:\Projects\Rock-ChMS\Dev Tools\Apps\EnsureCopyrightHeader\Program.cs
            string currentDirectory = Directory.GetCurrentDirectory();
            string rockDirectory = currentDirectory.Replace( "Dev Tools\\Apps\\EnsureCopyrightHeader\\bin\\Debug", string.Empty );

            int updatedFileCount = 0;
            updatedFileCount += FixupCopyrightHeaders( rockDirectory + "Rock\\" );
            updatedFileCount += FixupCopyrightHeaders( rockDirectory + "RockWeb\\" );
            updatedFileCount += FixupCopyrightHeaders( rockDirectory + "Rock.Rest\\" );

            Console.WriteLine( "\n\nDone!  Files Updated: {0}\n\nPress any key to continue.", updatedFileCount );
            Console.ReadLine();
        }

        /// <summary>
        /// Fixups the copyright headers.
        /// </summary>
        /// <param name="searchDirectory">The search directory.</param>
        private static int FixupCopyrightHeaders( string searchDirectory )
        {
            int result = 0;

            List<string> sourceFilenames = Directory.GetFiles( searchDirectory, "*.cs", SearchOption.AllDirectories ).ToList();

            const string copyrightBadge = @"//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
";

            string[] ignoreFolders = new string[] { "\\CodeGenerated", "\\obj", "\\Migrations" };
            foreach ( string fileName in sourceFilenames )
            {
                bool skipFile = false;
                foreach ( var f in ignoreFolders )
                {
                    if ( fileName.Contains( f ) )
                    {
                        skipFile = true;
                    }
                }
                if ( skipFile )
                {
                    continue;
                }

                string origFileContents = File.ReadAllText( fileName );

                if ( origFileContents.Contains( "<auto-generated>" ) )
                {
                    continue;
                }

                if (origFileContents.StartsWith(copyrightBadge))
                {
                    continue;
                }

                // get rid of any incorrect header by finding keyword using or namespace
                int positionUsing = origFileContents.IndexOf( "using ", 0 );
                if ( positionUsing < 0 )
                {
                    positionUsing = origFileContents.IndexOf( "namespace ", 0 );
                }

                string newFileContents = origFileContents.Substring( positionUsing );
                
                // try to clean up cases where the badge is after some of the using statements
                newFileContents = newFileContents.Replace( copyrightBadge, string.Empty );
                
                newFileContents = copyrightBadge + newFileContents;

                

                if ( !origFileContents.Equals( newFileContents ) )
                {
                    Console.WriteLine("Updating header in {0}", fileName);
                    result++;
                    File.WriteAllText( fileName, newFileContents );
                }
            }
            return result;
        }
    }
}
